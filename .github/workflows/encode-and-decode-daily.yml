name: Encode all images and decode them again daily.

on:
  push:
  schedule:
    - cron:  '0 20 * * *' # https://crontab.guru/#0_2_*_*_*

jobs:
  check-on-ubuntu:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]
        include:
          - os: ubuntu-18.04
            codename: "bionic"
            cavif-flag: ""
          - os: ubuntu-20.04
            codename: "focal"
            cavif-flag: ""
    steps:
    - uses: actions/checkout@v2
    - name: Install required tools
      run: sudo apt install -y curl jq unzip coreutils imagemagick
    - name: Download latest cavif
      shell: bash
      run: |
        runId=$(curl https://api.github.com/repos/link-u/cavif/actions/workflows/${WORKFLOW_ID}/runs | jq '[.workflow_runs[] | select( .conclusion == "success")][0].id')
        artifactId=$(curl https://api.github.com/repos/link-u/cavif/actions/runs/${runId}/artifacts | jq '[.artifacts[] | select( .name == "${{ matrix.codename }}")][0].id')
        curl --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' -o cavif.zip -L https://api.github.com/repos/link-u/cavif/actions/artifacts/${artifactId}/zip
        unzip cavif.zip
      env:
        WORKFLOW_ID: "452267" #id of https://github.com/link-u/cavif/actions?query=workflow%3A%22Build+debian+package+on+push+or+release-tags.%22
    - name: Download latest davif
      shell: bash
      run: |
        runId=$(curl https://api.github.com/repos/link-u/davif/actions/workflows/${WORKFLOW_ID}/runs | jq '[.workflow_runs[] | select( .conclusion == "success")][0].id')
        artifactId=$(curl https://api.github.com/repos/link-u/davif/actions/runs/${runId}/artifacts | jq '[.artifacts[] | select( .name == "${{ matrix.codename }}")][0].id')
        curl --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' -o davif.zip -L https://api.github.com/repos/link-u/davif/actions/artifacts/${artifactId}/zip
        unzip davif.zip
      env:
        WORKFLOW_ID: "452394" #id of https://github.com/link-u/davif/actions?query=workflow%3A%22Build+debian+package+on+push+or+release-tags.%22
    - name: Install davif and cavif
      run: sudo dpkg -i *.deb
    - name: Use installed cavif and davif
      run: |
        sed -i -e 's/^CAVIF=.*$/CAVIF=cavif ${{ matrix.cavif-flag }}/' Makefile
        sed -i -e 's/^DAVIF=.*$/DAVIF=davif/' Makefile
    - name: Clean all images.
      run: make clean
    - name: Encode them all.
      run: make all -j
    - name: Decode them all.
      run: make decode -j
    - name: Copy images to upload.
      run: |
        mkdir -p ${{ matrix.codename }}/decoded
        mkdir -p ${{ matrix.codename }}/encoded
        cp decoded/* ${{ matrix.codename }}/decoded
        cp *.avif ${{ matrix.codename }}/encoded
    - name: Upload result
      uses: actions/upload-artifact@v1
      with:
        name: ${{ matrix.codename }}
        path: ${{ matrix.codename }}
    - name: Compare the result
      run: make compare -j
  check-on-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download davif/cavif
        shell: pwsh
        env:
          APPVEYOR_TOKEN: ${{ secrets.CAVIF_APPVEYOR_TOKEN }}
        run: |
          function download($AccountName, $ProjectSlug) {
            # https://www.appveyor.com/docs/api/samples/download-artifacts-ps/
            $apiUrl = 'https://ci.appveyor.com/api'
            $token = "$APPVEYOR_TOKEN"
            $headers = @{
              "Authorization" = "Bearer $token"
              "Content-type" = "application/json"
            }
            $downloadLocation = (Resolve-Path .\).Path
            
            # get project with last build details
            Write-Host "Fetching: $apiUrl/projects/$AccountName/$ProjectSlug"
            $project = Invoke-RestMethod -Method Get -Uri "$apiUrl/projects/$AccountName/$ProjectSlug" -Headers $headers
            Write-Host ($project | Format-Table | Out-String)
            
            # we assume here that build has a single job
            # get this job id
            Write-Host ($project.build | Where { $_.status -eq "success" } | Format-Table | Out-String)
            $jobId = ($project.build | Where { $_.status -eq "success" }).jobs[0].jobId

            Write-Host "Jobid: $jobid"
  
            # get job artifacts (just to see what we've got)
            $artifacts = Invoke-RestMethod -Method Get -Uri "$apiUrl/buildjobs/$jobId/artifacts" -Headers $headers
  
            Write-Host ($artifacts | Format-Table | Out-String)
  
            # here we just take the first artifact, but you could specify its file name
            $artifactFileName = $artifacts[0].fileName
            
            # artifact will be downloaded as
            $localArtifactPath = "$downloadLocation\$artifactFileName"
  
            Write-Host "Download To: $localArtifactPath"
  
            # download artifact
            # -OutFile - is local file name where artifact will be downloaded into
            # the Headers in this call should only contain the bearer token, and no Content-type, otherwise it will fail!
            $downloadURL = "$apiUrl/buildjobs/$jobId/artifacts/$artifactFileName"
            Write-Host "Download from: $downloadURL"
  
            Invoke-RestMethod -Method Get -Uri $downloadURL -OutFile "$localArtifactPath" -Headers @{ "Authorization" = "Bearer $token" }
  
            7z.exe x "$localArtifactPath"
            Remove-Item "$localArtifactPath"
          }
          Write-Host "::group::download davif"
          download -AccountName ledyba-z -ProjectSlug davif
          Write-Host "::endgroup::"
          Write-Host "::group::download cavif"
          download -AccountName ledyba-z -ProjectSlug cavif
          Write-Host "::endgroup::"
      - name: Install msys2
        uses: msys2/setup-msys2@v1
        with:
          msystem: MSYS
          update: true
      - name: Install make
        shell: msys2 {0}
        run: |
          pacman --noconfirm -S make
      - name: Use installed cavif and davif
        shell: msys2 {0}
        run: |
          sed -i -e 's/^CAVIF=.*$/CAVIF=.\/cavif.exe/' Makefile
          sed -i -e 's/^DAVIF=.*$/DAVIF=.\/davif.exe/' Makefile
      - name: Encode them all
        shell: msys2 {0}
        run: |
          make all -j
      - name: Decode them all
        shell: msys2 {0}
        run: |
          make decode -j
  